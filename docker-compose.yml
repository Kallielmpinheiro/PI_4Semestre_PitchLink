services:
  angular:
    build:
      context: ./frontend
    container_name: angular_app
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.angular/cache
    networks:
      - app_network
    depends_on:
      - django_api
    command: ng serve --host 0.0.0.0 --poll 2000

  django_api:
    build:
      context: ./backend
    container_name: django_api
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
    command: python manage.py runserver 0.0.0.0:8000

  django_ws:
    build:
      context: ./backend
    container_name: django_ws
    volumes:
      - ./backend:/app
    ports:
      - "8001:8001"
    env_file:
      - ./backend/.env
    networks:
      - app_network
    depends_on:
      redis:
        condition: service_healthy
    command: sh -c "until nc -z redis 6379; do sleep 1; done; daphne -b 0.0.0.0 -p 8001 backend.asgi:application"

  db:
    image: postgres:13.5
    container_name: PI4SEM
    environment:
      - POSTGRES_DB=PI4SEM
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis_app
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge
